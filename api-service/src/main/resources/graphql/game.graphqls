input PlayGameCommand {
    playerOneId: String!
    playerTwoId: String!
    playerOneScore: Int!
    playerTwoScore: Int!
}

input ScheduleGameCommand {
    playerOneId: String!
    playerTwoId: String!
    dateTime: LocalDateTime!
}

input CompleteGameCommand {
    gameId: String!
    playerOneScore: Int!
    playerTwoScore: Int!
}

input GetGamesForLeagueQuery {
    leagueId: String!
    first: Int!
    after: String
    before: String
}

input GetCompletedGamesForLeagueQuery {
    leagueId: String!
    first: Int!
    after: String
    before: String
}

input GetScheduledGamesForLeagueQuery {
    leagueId: String!
    first: Int!
    after: String
    before: String
}

input GetGamesForPlayerQuery {
    playerId: String!
    first: Int!
    after: String
    before: String
}

interface Game {
    id: String!
    dateTime: LocalDateTime!
    playerOneId: String!
    playerOneName: String!
    playerOneRating: Int!
    playerOneDeviation: Int!
    playerTwoId: String!
    playerTwoName: String!
    playerTwoRating: Int!
    playerTwoDeviation: Int!
}

type CompletedGame implements Game {
    id: String!
    dateTime: LocalDateTime!
    playerOneId: String!
    playerOneName: String!
    playerOneRating: Int!
    playerOneDeviation: Int!
    playerTwoId: String!
    playerTwoName: String!
    playerTwoRating: Int!
    playerTwoDeviation: Int!
    result: Result!
}

type ScheduledGame implements Game {
    id: String!
    dateTime: LocalDateTime!
    playerOneId: String!
    playerOneName: String!
    playerOneRating: Int!
    playerOneDeviation: Int!
    playerTwoId: String!
    playerTwoName: String!
    playerTwoRating: Int!
    playerTwoDeviation: Int!
}

type Result {
    playerOneScore: Int!
    playerOneDeviationDelta: Int!
    playerOneRatingDelta: Int!
    playerTwoScore: Int!
    playerTwoDeviationDelta: Int!
    playerTwoRatingDelta: Int!
}
